<?xml version="1.0"?>
<!--
  #%L
  Grill Server
  %%
  Copyright (C) 2014 Inmobi
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<configuration>
<property>
  <name>grill.drivers</name>
  <value>com.inmobi.grill.driver.hive.HiveDriver</value>
  <description>Drivers enabled for this grill server instance</description>
</property>

<property>
  <name>grill.servicenames</name>
  <value>session,query,metastore,scheduler,quota</value>
  <description>These services would be started in the specified order when grill-server starts up</description>
</property>

<property>
  <name>grill.session.service.impl</name>
  <value>com.inmobi.grill.server.session.HiveSessionService</value>
  <description>Implementation class for session service</description>
</property>

<property>
  <name>grill.query.service.impl</name>
  <value>com.inmobi.grill.server.query.QueryExecutionServiceImpl</value>
  <description>Implementation class for query execution service</description>
</property>

<property>
  <name>grill.quota.service.impl</name>
  <value>com.inmobi.grill.server.quota.QuotaServiceImpl</value>
  <description>Implementation class for quota service</description>
</property>

<property>
  <name>grill.metastore.service.impl</name>
  <value>com.inmobi.grill.server.metastore.CubeMetastoreServiceImpl</value>
  <description>Implementation class for metastore service</description>
</property>

<property>
  <name>grill.scheduler.service.impl</name>
  <value>com.inmobi.grill.server.scheduler.QuerySchedulerServiceImpl</value>
  <description>Implementation class for query scheduler service</description>
</property>

<property>
  <name>grill.server.base.url</name>
  <value>http://localhost:9999/grillapi/</value>
  <description>The base url for the grill server</description>
</property>

<property>
  <name>grill.persistent.resultset</name>
  <value>false</value>
  <description>Whether to enable persistent resultset for queries. When enabled,
 server will fetch results from driver, custom format them if any and store in
 a configured location. The file name of query output is queryhandle-id, with
 configured extensions</description>
</property>

<property>
  <name>grill.result.parent.dir</name>
  <value>/tmp/grillreports</value>
  <description>The directory for storing persisted result of query.</description>
</property>

<property>
  <name>grill.add.insert.overwrite</name>
  <value>true</value>
  <description>Prefix query with insert overwrite clause if the query is persistent.
 User can disable if user gave the clause himself. </description>
</property>

<property>
  <name>grill.query.state.logger.enabled</name>
  <value>true</value>
  <description>Disable or enable the query state logger with this config.
 The location for the logger can be specified in log4j properties for the class
 com.inmobi.grill.server.query.QueryExecutionServiceImpl.QueryStatusLogger </description>
</property>

<property>
  <name>grill.event.service.thread.pool.size</name>
  <value></value>
  <description>The size of thread pool for notifying events. The no value is specified,
 it uses the available processors as the number.</description>
</property>

<property>
  <name>grill.enable.console.metrics</name>
  <value>false</value>
  <description>Enable metrics to be reported on console</description>
</property>

<property>
  <name>grill.enable.ganglia.metrics</name>
  <value>false</value>
  <description>Enable metrics to be reported on ganglia</description>
</property>

<property>
  <name>grill.metrics.ganglia.host</name>
  <value></value>
  <description>The ganglia host name</description>
</property>

<property>
  <name>grill.metrics.ganglia.port</name>
  <value></value>
  <description>The ganglia port</description>
</property>

<property>
  <name>grill.metrics.reporting.period</name>
  <value>10</value>
  <description>The reporting period for metrics. The value is in seconds</description>
</property>

<property>
  <name>grill.server.restart.enabled</name>
  <value>true</value>
  <description>If flag is enabled, all the services will be persisted to persistent
 location passed. </description>
</property>

<property>
  <name>grill.server.recover.onrestart</name>
  <value>true</value>
  <description>If the flag is enabled, all the services will be started from last
 saved state, if disabled all the services will start afresh</description>
</property>

<property>
  <name>grill.server.persist.location</name>
  <value>file:///tmp/grillserver</value>
  <description>The directory in which grill server will persist its state when it is
 going down. The location be on any Hadoop compatible file system. Server will read from
 the location when it is restarted and recovery is enabled. So, Server should have
 both read and write permissions to the location
  </description>
</property>

<property>
  <name>grill.server.mode</name>
  <value>OPEN</value>
  <description>The mode in which server should run. Allowed values are OPEN, READ_ONLY,
 METASTORE_READONLY, METASTORE_NODROP. OPEN mode will allow all requests. READ_ONLY mode
 will allow all requests on session resouce and only GET requests on all other resources.
 METASTORE_READONLY will allow GET on metastore and all other requests in other services.
 METASTORE_NODROP will not allow DELETE on metastore, will allow all other requests.
 </description>
</property>

<property>
  <name>grill.persistent.resultset.indriver</name>
  <value>true</value>
  <description>Whether the result should be persisted by driver. Currently only
 HiveDriver persists the results in a HDFS location.</description>
</property>

<property>
  <name>grill.result.output.dir.format</name>
  <value></value>
  <description>The format of the output if result is persisted in hdfs. The format
 should be expressed in HQL.</description>
</property>

<property>
  <name>grill.query.hdfs.output.path</name>
  <value>hdfsout</value>
  <description>The directory under the parent result directory, in which HiveDriver
 will persist the results, if persisting by driver is enabled.</description>
</property>

<property>
  <name>grill.query.output.formatter</name>
  <value></value>
  <description>The query result output formatter for the query. If no value is
 specified, then com.inmobi.grill.lib.query.FileSerdeFormatter will be used to
 format in-memory result sets, com.inmobi.grill.lib.query.FilePersistentFormatter
 will be used to format driver persisted result sets.</description>
</property>

<property>
  <name>grill.result.output.serde</name>
  <value>com.inmobi.grill.lib.query.CSVSerde</value>
  <description>The default serde class name that should be used by 
 com.inmobi.grill.lib.query.FileSerdeFormatter for formatting the output
  </description>
</property>

<property>
  <name>grill.query.output.file.extn</name>
  <value>.csv</value>
  <description>The extension name for the persisted query output file. If
 file is compressed, the extension from compression codec will be appended to
 this extension.</description>
</property>

<property>
  <name>grill.query.output.charset.encoding</name>
  <value>UTF-8</value>
  <description>The charset encoding for formatting query result. It supports
 all the encodings supported by java.io.OutputStreamWriter.</description>
</property>

<property>
  <name>grill.query.output.enable.compression</name>
  <value>false</value>
  <description>Whether to compress the query result output</description>
</property>

<property>
  <name>grill.query.output.compression.codec</name>
  <value>org.apache.hadoop.io.compress.GzipCodec</value>
  <description>The codec used to compress the query output, if compression is
 enabled</description>
</property>

<property>
  <name>grill.query.output.write.header</name>
  <value>false</value>
  <description>Whether to write header as part of query result formatting. When
 enabled the user given header will be added in case of driver persisted results,
 and column names chosen will be added as header for in-memory results. </description>
</property>

<property>
  <name>grill.query.output.header</name>
  <value></value>
  <description>The value of custom header that should be written, if any. This
 header will be added in formatting driver persisted results.</description>
</property>

<property>
  <name>grill.query.output.write.footer</name>
  <value>false</value>
  <description>Whether to write footer as part of query result. When enabled,
 total number of rows will be written as part of header.</description>
</property>

<property>
  <name>grill.query.output.footer</name>
  <value></value>
  <description>The value of custom footer that should be written, if any. This
 footer will be added in formatting driver persisted results.</description>
</property>

</configuration>
