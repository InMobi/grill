# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Language used for error configuration: HOCON: Human Optimized Config Object Notation
# It keeps the semantics (tree structure; set of types; encoding/escaping)from JSON,
# and makes it more convenient and readable for humans ).
# More reading: https://github.com/typesafehub/config/blob/master/HOCON.md
# Typesafe config library license: Apache License Version 2.0, January 2004

# Define HTTP status codes

BAD_REQUEST = 400
INTERNAL_SERVER_ERROR = 500

# Define all module specific errors

# lensCommonErrors: Defined for lens-api module and expected to be used by every other module

lensCommonErrors = [

  {
    errorCode = 1001
    httpStatusCode = ${INTERNAL_SERVER_ERROR}
    errorMsg = "Internal Server Error."
  }

]

# lensServerErrors: Defined for lens-server module

lensServerErrors = [

 {
   errorCode = 2001
   httpStatusCode = ${BAD_REQUEST}
   errorMsg = "Session id not provided. Please provide a session id."
 }

 {
   errorCode = 2002
   httpStatusCode = ${BAD_REQUEST}
   errorMsg = "Query is not provided, or it is empty or blank. Please provide a valid query."
 }

 {
   errorCode = 2003
   httpStatusCode = ${BAD_REQUEST}
   errorMsg = "Provided Operation is not supported. Supported Operations are: [%s]"
   payloadClass = org.apache.lens.server.query.SupportedQuerySubmitOperations
 }

]

# lensCubeErrors: Defined for lens-cube module

lensCubeErrors = [

 {
   errorCode = 3001
   httpStatusCode = ${BAD_REQUEST}
   errorMsg = "Syntax Error: %s"
 }

 {
    errorCode = 3002
    httpStatusCode = ${BAD_REQUEST}
    errorMsg = "%s can only be queried %s. Please adjust the selected time range accordingly."
    payloadClass = org.apache.lens.cube.error.ColUnAvailableInTimeRange
 }

]

# Overriding errors in lens-errors.conf via lens-errors-override.conf:
#
# Step 1: Copy contents of lens-errors.conf to lens-errors-override.conf
# Step 2: Modify the error objects to be changed.
#
# lens-errors-override.conf can be deployed via any debian. However, it should be available on lens server and
# lens-client class path. Lens client has to be aware of error payload classes defined with errors in configuration
# files to unmarshall the error payloads propagated with errors. lens-errors-override.conf is an optional file and it
# is not mandatory to be present in classpath.
#
# Error object preferrence rule: If an error object with same error code is defined multiple times within same array
# or different arrays, then the error object defined later will completely override the object defined earlier.
# Two error objects are considered same when they have same error code. This is done to ensure that there is only one
# error configuration per error code.

# Adding more errors via lens-errors-override.conf:
#
# Pluggable code in lens which is not shipped with lens distribution can define new errors using
# lens-errors-override.conf.
#
# E.g.: Say pluggable code has new errors collection named lensXyzErrors to be configured.
#
# Step 1: Copy contents of lens-errors.conf to lens-errors-override.conf
# Step 2: Define lensXyzErrors before defining errors property.
# Step 3: Append it to the end of errors property as shown below.
#         errors = ${lensCommonErrors}${lensServerErrors}${lensCubeErrors}${lensXyzErrors}

# Prepare errors array for Lens server and Lens client.
# Lens server and Lens client are only aware of errors array. They are not aware of any other array defined in
# error configuration files. Hence an errors array is prepared which is a concatenation of all other error arrays.

errors = ${lensCommonErrors}${lensServerErrors}${lensCubeErrors}
