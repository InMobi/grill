~~
~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.
~~

User CLI Commands

  Lens provides CLI on a shell. This document provides various commands available
  in lens CLI.  All the commands documented below can be seen by typing <<help>>
  from the CLI shell.

%{toc}


* Understanding this document

  Given below are a bunch of available commands in lens cli along with the argumets they expect and the way
  they expect those arguments. This section will give a brief introduction on how to interpret the help of
  commands given below. Arguments to commands can be passed in the following ways:

** Passing Keyword arguments

  In this, all the arguments are passed with arg name and arg value. example:

  <<<command --arg1 value1 --arg2 value2 --arg3 value3 >>>

** Passing list arguments

  In this, arguments are passed without arg names. Directly values will be passed:

  <<<command value1 value2 value3>>>


** Mixing list and keyword arguments

  <<<base command --arg1 value1 [--arg2] value2 [[--arg3] value3] [--arg4 value4] >>>

  The <<<[]>>> notation means <<<optional>>>. So argument <<<arg1>>> has to be passed as keyword argument, <<<arg2>>>
  can be passed either with or without <<<--arg2>>>. arg3 can be omitted, passed without <<<--arg3>>> or passed
  with <<<arg3>>>. arg4 can be omitted, or if passed, it has to be passed with <<<--arg4>>>.


=========================


* LENS Commands


** Argument Passing in LENS

  Lens supports both the approaches of passing arguments but advises the usage of keyword arguments over list arguments.
  Mixing is not generally supported. Keyword args are always supported. In places where all the arguments
  have arg name optional, list arguments are supported. So to re-iterate, list arguments are supported if


  * All args are either like <<<arg2>>> or <<<arg3>>> in the previous section.

  * Arguments are of any type, but there is only one argument of type arg2 or arg3 and that's the argument you intend
     to pass value to.

** Known bugs

  * If all arguments have same value, Something weird will happen.




** Session management

  Opening the lens CLI shell is equivalent to open a session with lens server.This section provides all the commands available for in shell which are applicable for the full session.

*--+--+
|<<Command>>|<<Description>>|
*--+--+
|set \<key\>=\<value\>|Assign <<<value>>> to session parameter specified with <<<key>>> on lens server|
*--+--+
|add jar [--path] \<path-to-jar-on-server-side\>|Adds jar resource to the session|
*--+--+
|remove jar [--path] \<path-to-jar-on-server-side\>|Removes a jar resource from session|
*--+--+
|add file [--path] \<path-to-file-on-server-side\>|Adds a file resource to session|
*--+--+
|remove file [--path] \<path-to-file-on-server-side\>|removes a file resource from session|
*--+--+
|list resources [[--type] \<resource-type\>]|list all resources from session. If type is provided,  lists resources of type <<<resource-type>>>. Valid values for type are jar and file.|
*--+--+
|close/bye|Releases all resources of the server session and exits the shell|
*--+--+
|get [--key] \<key\>|Fetches and prints session parameter specified with name <<<key>>> from lens server|
*--+--+
|show params|Fetches and prints all session parameter from lens server|
*--+--+
  <<Lens Connection Commands>>

===

** Database management commands

  These commands provide CRUD for databases

*--+--+
|<<Command>>|<<Description>>|
*--+--+
|drop database [--db] \<database-name\>|drop a database with specified name|
*--+--+
|use [--db] \<database-name\>|change to new database|
*--+--+
|create database [--db] \<database-name\> [--ignoreIfExists \<ignore-if-exists\>]|create a database with specified name. if <<<ignore-if-exists>>> is true, create will not be tried if already exists. Default is false|
*--+--+
|show databases|displays list of all databases|
*--+--+
  <<Lens Database Commands>>

===

** Storage Management

  These commands provide CRUD for Storages

*--+--+
|<<Command>>|<<Description>>|
*--+--+
|show storages|list all storages|
*--+--+
|create storage [--path] \<path-to-storage-spec\>|Create a new Storage from file <<<path-to-storage-spec>>>|
*--+--+
|drop storage [--name] \<storage-name\>|drop storage <<<storage-name>>>|
*--+--+
|update storage [--name] \<storage-name\> [--path] \<path-to-storage-spec\>|update storage <<<storage-name>>> with storage spec from <<<path-to-storage-spec>>>|
*--+--+
|describe storage [--name] \<storage-name\>|describe storage <<<storage-name>>>|
*--+--+
  <<Lens Storage Commands>>

===

** OLAP Data cube metadata management

  These commands provide CRUD for cubes

*--+--+
|<<Command>>|<<Description>>|
*--+--+
|show cubes|show list of cubes in current database|
*--+--+
|create cube [--path] \<path-to-cube-spec-file\>|Create a new Cube, taking spec from <<<path-to-cube-spec-file>>>|
*--+--+
|describe cube [--name] \<cube_name\>|describe cube with name <<<cube_name>>>|
*--+--+
|update cube [--name] \<cube_name\> [--path] \<path-to-cube-spec-file\>|update cube <<<cube_name>>> with spec from <<<path-to-cube-spec-file>>>|
*--+--+
|drop cube [--name] \<cube_name\>|drop cube <<<cube_name>>>|
*--+--+
|cube latestdate [--cube] \<cube_name\> [--timeDimension] \<time_dimension_name\>|get latest date of data available in cube <<<cube_name>>> for time dimension <<<time_dimension_name>>>|
*--+--+
  <<Lens Cube Commands>>

===

** Dimension Management

  These commands provide CRUD for Dimensions

*--+--+
|<<Command>>|<<Description>>|
*--+--+
|show dimensions|show list of all dimensions in current database|
*--+--+
|create dimension [--path] \<path-to-dimension-spec file\>|Create a new Dimension, taking spec from <<<path-to-dimension-spec file>>>|
*--+--+
|describe dimension [--name] \<dimension_name\>|describe dimension <<<dimension_name>>>|
*--+--+
|update dimension [--name] \<dimension_name\> [--path] \<path-to-dimension-spec-file\>|update dimension <<<dimension_name>>>, taking spec from <<<path-to-dimension-spec file>>>|
*--+--+
|drop dimension [--name] \<dimension_name\>|drop dimension <<<dimension_name>>>|
*--+--+
  <<Lens Dimension Commands>>

===

** Management of Facts

  These command provide CRUD for facts, associated storages, and fact partitions

*--+--+
|<<Command>>|<<Description>>|
*--+--+
|show facts [[--cube_name] \<cube_name\>]|display list of fact tables in current database. If optional <<<cube_name>>> is supplied, only facts belonging to cube <<<cube_name>>> will be displayed|
*--+--+
|create fact [--path] \<path-to-fact-spec-file\>|create a fact table with spec from <<<path-to-fact-spec-file>>>|
*--+--+
|describe fact [--fact_name] \<fact_name\>|describe fact <<<fact_name>>>|
*--+--+
|update fact [--fact_name] \<fact_name\> [--path] \<path-to-fact-spec\>|update fact <<<fact_name>>> taking spec from <<<path-to-fact-spec>>>|
*--+--+
|drop fact [--fact_name] \<fact_name\> [--cascade \<cascade\>]|drops fact <<<fact_name>>>. If <<<cascade>>> is true, all the storage tables associated with the fact <<<fact_name>>> are also dropped. By default <<<cascade>>> is false|
*--+--+
|fact list storage [--fact_name] \<fact_name\>|display list of storages associated to fact <<<fact_name>>>|
*--+--+
|fact add storage [--fact_name] \<fact_name\> [--path] \<path-to-storage-spec\>|adds a new storage to fact <<<fact_name>>>, taking storage spec from <<<path-to-storage-spec>>>|
*--+--+
|fact get storage [--fact_name] \<fact_name\> [--storage_name] \<path-to-storage-spec\>|describe storage <<<storage_name>>> of fact <<<fact_name>>>|
*--+--+
|fact drop storage [--fact_name] \<fact_name\> [--storage_name] \<storage_name\>|drop storage <<<storage_name>>> from fact <<<fact_name>>>|
*--+--+
|fact drop all storages [--fact_name] \<fact_name\>|drop all storages associated to fact <<<fact_name>>>|
*--+--+
|fact list partitions [--fact_name] \<fact_name\> [--storage_name] \<storage_name\> [[--filter] \<partition-filter\>]|get all partitions associated with fact <<<fact_name>>>, storage <<<storage_name>>> filtered by <<<partition-filter>>>|
*--+--+
|fact drop partitions [--fact_name] \<fact_name\> [--storage_name] \<storage_name\> [[--filter] \<partition-filter\>]|drop all partitions associated with fact <<<fact_name>>>, storage <<<storage_name>>> filtered by <<<partition-filter>>>|
*--+--+
|fact add single-partition [--fact_name] \<fact_name\> [--storage_name] \<storage_name\> [--path] \<partition-spec-path\>|add single partition to fact <<<fact_name>>>'s storage <<<storage_name>>>, reading spec from <<<partition-spec-path>>>|
*--+--+
|fact add partitions [--fact_name] \<fact_name\> [--storage_name] \<storage_name\> [--path] \<partition-list-spec-path\>|add multiple partition to fact <<<fact_name>>>'s storage <<<storage_name>>>, reading partition list spec from <<<partition-list-spec-path>>>|
*--+--+
  <<Lens Fact Commands>>

===

** Commands for Dimension Tables

  These commands provide CRUD for dimension tables, associated storages, and fact partitions

*--+--+
|<<Command>>|<<Description>>|
*--+--+
|dimtable drop all storages [--dimtable_name] \<dimtable_name\>|drop all storages associated to dimension table|
*--+--+
|dimtable list partitions [--dimtable_name] \<dimtable_name\> [--storage_name] \<storage_name\> [[--filter] \<partition-filter\>]|get all partitions associated with dimtable <<<dimtable_name>>>, storage <<<storage_name>>> filtered by <<<partition-filter>>>|
*--+--+
|dimtable drop partitions [--dimtable_name] \<dimtable_name\> [--storage_name] \<storage_name\> [[--filter] \<partition-filter\>]|drop all partitions associated with dimtable <<<dimtable_name>>>, storage <<<storage_name>>> filtered by <<<partition-filter>>>|
*--+--+
|dimtable add single-partition [--dimtable_name] \<dimtable_name\> [--storage_name] \<storage_name\> [--path] \<partition-spec-path\>|add single partition to dimtable <<<dimtable_name>>>'s storage <<<storage_name>>>, reading spec from <<<partition-spec-path>>>|
*--+--+
|dimtable add partitions [--dimtable_name] \<dimtable_name\> [--storage_name] \<storage_name\> [--path] \<partition-list-spec-path\>|add multiple partition to dimtable <<<dimtable_name>>>'s storage <<<storage_name>>>, reading partition list spec from <<<partition-list-spec-path>>>|
*--+--+
|show dimtables [[--dimension_name] \<dimension_name\>]|display list of dimtables in current database. If optional <<<dimension_name>>> is supplied, only facts belonging to dimension <<<dimension_name>>> will be displayed|
*--+--+
|create dimtable [--path] \<path-to-dimtable-spec-file\>|Create a new dimension table taking spec from <<<path-to-dimtable-spec-file>>>|
*--+--+
|describe dimtable [--dimtable_name] \<dimtable_name\>|describe dimtable <<<dimtable_name>>>|
*--+--+
|update dimtable [--dimtable_name] \<dimtable_name\> [--path] \<path-to-dimtable-spec\>|update dimtable <<<dimtable_name>>> taking spec from <<<path-to-dimtable-spec>>>|
*--+--+
|drop dimtable [--dimtable_name] \<dimtable_name\> [--cascade \<cascade\>]|drop dimtable <<<dimtable_name>>>.  If <<<cascade>>> is true, all the storage tables associated with the dimtable <<<dimtable_name>>> are also dropped. By default <<<cascade>>> is false|
*--+--+
|dimtable list storages [--dimtable_name] \<dimtable_name\>|display list of storage associated to dimtable <<<dimtable_name>>>|
*--+--+
|dimtable add storage [--dimtable_name] \<dimtable_name\> [--path] \<path-to-storage-spec\>|adds a new storage to dimtable <<<dimtable_name>>>, taking storage spec from <<<path-to-storage-spec>>>|
*--+--+
|dimtable get storage [--dimtable_name] \<dimtable_name\> [--storage_name] \<storage_name\>|describe storage <<<storage_name>>> of dimtable <<<dimtable_name>>>|
*--+--+
|dimtable drop storage [--dimtable_name] \<dimtable_name\> [--storage_name] \<storage_name\>|drop storage <<<storage_name>>> from dimtable <<<dimtable_name>>>|
*--+--+
  <<Lens Dimension Table Commands>>

===

** Native Table management

  Read operations on native tables

*--+--+
|<<Command>>|<<Description>>|
*--+--+
|show nativetables|show list of native tables belonging to current database|
*--+--+
|describe nativetable [--name] \<native-table-name\>|describe nativetable named <<<native-table-name>>>|
*--+--+
  <<Lens Native Table Commands>>

===

** Query Management

  This section provides commands for query life cycle - submit, check status,
  fetch results, kill or list all the queries. Also provides commands for
  prepare a query, destroy a prepared query and list all prepared queries.

  Please note that, character <<<">>> is used as delimiter by the Spring Shell
  framework, which is used to build lens cli. So queries which require <<<">>>,
  should be prefixed with another double quote. For example
  <<<query execute cube select id,name from dim_table where name != ""first"">>>,
  will be parsed as <<<cube select id,name from dim_table where name != "first">>>

*--+--+
|<<Command>>|<<Description>>|
*--+--+
|query status [--query_handle] \<query_handle\>|Fetch status of executed query having query handle <<<query_handle>>>|
*--+--+
|query details [--query_handle] \<query_handle\>|Get query details of query with handle <<<query_handle>>>|
*--+--+
|query explain [--query] \<query-string\> [--save_location \<save_location\>]|Explain execution plan of query <<<query-string>>>. Can optionally save the plan to a file by providing <<<save_location>>>|
*--+--+
|query list [--state \<query-status\>] [--name \<query-name\>] [--user \<user-who-submitted-query\>] [--fromDate \<submission-time-is-after\>] [--toDate \<submission-time-is-before\>]|Get all queries. Various filter options can be provided(optionally),  as can be seen from the command syntax|
*--+--+
|query execute [--query] \<query-string\> [--async \<async\>] [--name \<query-name\>]|Execute query <<<query-string>>>. If <<<async>>> is true, The query is launched in async manner and query handle is returned. It's by default false. <<<query name>>> can also be provided, though not required|
*--+--+
|query kill [--query_handle] \<query_handle\>|Kill query with handle <<<query_handle>>>|
*--+--+
|query results [--query_handle] \<query_handle\>|get results of async query with query handle <<<query_handle>>>|
*--+--+
|prepQuery list [--name \<query-name\>] [--user \<user-who-submitted-query\>] [--fromDate \<submission-time-is-after\>] [--toDate \<submission-time-is-before\>]|Get all prepared queries. Various filters can be provided(optionally) as can be seen from command syntax|
*--+--+
|prepQuery details [--prepare_handle] \<prepare_handle\>|Get prepared query with handle <<<prepare_handle>>>|
*--+--+
|prepQuery destroy [--prepare_handle] \<prepare_handle\>|Destroy prepared query with handle <<<prepare_handle>>>|
*--+--+
|prepQuery execute [--prepare_handle] Prepare handle to execute [--async \<async\>] [--name \<query-name\>]|Execute prepared query with handle <<<prepare_handle>>>. If <<<async>>> is supplied and is true, query is run in async manner and query handle is returned immediately. Optionally, <<<query-name>>> can be provided, though not required.|
*--+--+
|prepQuery explain [--query] \<query-string\> [--name \<query-name\>]|Explain and prepare query <<<query-string>>>. Can optionally provide <<<query-name>>>|
*--+--+
|prepQuery prepare [--query] \<query-string\> [--name \<query-name\>]|Prepapre query <<<query-string>>> and return prepare handle. Can optionaly provide <<<query-name>>>|
*--+--+
  <<Lens Query Commands>>

===

